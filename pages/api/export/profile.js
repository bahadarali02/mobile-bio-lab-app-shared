import { jsPDF } from 'jspdf';
import pool from '../../../lib/db';
import jwt from 'jsonwebtoken';

export default async function handler(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  // Get token from cookies
  const token = req.cookies.token;
  if (!token) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  let connection;

  try {
    // Verify JWT token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const userId = decoded.userId;
    
    connection = await pool.getConnection();
    
    // Get user data
    const [users] = await connection.execute(
      `SELECT FirstName, LastName, Email, Role, City, MobileNumber, StudentVUId, 
              Verified, CreatedAt 
       FROM users 
       WHERE UserID = ?`,
      [userId]
    );
    
    if (users.length === 0) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    const user = users[0];
    
    // Create PDF with jsPDF
    const doc = new jsPDF();
    
    // Set margins and initial position
    const margin = 20;
    let yPosition = margin;
    
    // Add title
    doc.setFontSize(20);
    doc.setFont('helvetica', 'bold');
    doc.text('MOBILE BIO LAB - USER PROFILE', 105, yPosition, { align: 'center' });
    yPosition += 15;
    
    // Add generation date
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text(`Generated: ${new Date().toLocaleString()}`, 105, yPosition, { align: 'center' });
    yPosition += 20;
    
    // Add separator line
    doc.line(margin, yPosition, 190, yPosition);
    yPosition += 15;
    
    // Add section title
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('PERSONAL INFORMATION', margin, yPosition);
    yPosition += 20;
    
    // User information
    const userInfo = [
      { label: 'First Name:', value: user.FirstName || 'Not provided' },
      { label: 'Last Name:', value: user.LastName || 'Not provided' },
      { label: 'Email:', value: user.Email || 'Not provided' },
      { label: 'Student VU ID:', value: user.StudentVUId || 'Not provided' },
      { label: 'Role:', value: user.Role ? user.Role.charAt(0).toUpperCase() + user.Role.slice(1) : 'Not provided' },
      { label: 'City:', value: user.City || 'Not provided' },
      { label: 'Mobile Number:', value: user.MobileNumber || 'Not provided' },
      { label: 'Account Status:', value: user.Verified ? 'Verified' : 'Pending verification' },
      { label: 'Member Since:', value: user.CreatedAt ? new Date(user.CreatedAt).toLocaleDateString() : 'Not available' }
    ];
    
    // Add user information
    doc.setFontSize(12);
    userInfo.forEach((info, index) => {
      if (yPosition > 250) {
        doc.addPage();
        yPosition = margin;
      }
      
      doc.setFont('helvetica', 'bold');
      doc.text(info.label, margin, yPosition + (index * 15));
      doc.setFont('helvetica', 'normal');
      doc.text(info.value, margin + 60, yPosition + (index * 15));
    });
    
    yPosition += (userInfo.length * 15) + 20;
    
    // Add footer
    if (yPosition > 250) {
      doc.addPage();
      yPosition = margin;
    }
    
    doc.setFontSize(10);
    doc.setFont('helvetica', 'italic');
    doc.text('This is an official document generated by Mobile Bio Lab System', 105, 280, { align: 'center' });
    
    // Generate PDF as array buffer
    const pdfBuffer = doc.output('arraybuffer');
    
    // Set headers
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${user.FirstName}-${user.LastName}-profile.pdf"`);
    res.setHeader('Content-Length', pdfBuffer.byteLength);
    
    // Send the PDF
    res.send(Buffer.from(pdfBuffer));
    
  } catch (error) {
    console.error('Profile export error:', error);
    
    if (error.name === 'JsonWebTokenError' || error.name === 'TokenExpiredError') {
      return res.status(401).json({ error: 'Invalid or expired token' });
    }
    
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    if (connection) {
      connection.release();
    }
  }
}